generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id           String          @id @default(uuid())
  firstName    String
  lastName     String
  email        String          @unique
  phone        String
  password     String
  profileImg   String?
  emailToken   String?
  isBlocked    Boolean         @default(false)
  isVerified   Boolean         @default(false)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime?
  report       Reports[]
  reward       Rewards[]
  // collectedWaste CollectedWastes[]
  notification Notifications[]
  transaction  Transactions[]
  sessions     Sessions[]
  leaderboard  Leaderboard[]

  @@map("users")
}

model Sessions {
  id           String    @id @default(uuid())
  sessionToken String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime?
  user         Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@map("sessions")
}

model Reports {
  id          String     @id @default(uuid())
  user        Users      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  location    String
  wasteType   WASTE_TYPE
  amount      Int
  imgURL      String
  weight      Int        @default(0)
  status      STATUS
  collectorID String?
  createdAt   DateTime   @default(now())
  rewards     Rewards[]

  @@map("reports")
}

model Rewards {
  id        String    @id @default(uuid())
  user      Users     @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId    String
  points    Int       @default(0)
  createdAt DateTime  @default(now())
  updateAt  DateTime?
  reports   Reports   @relation(references: [id], fields: [reportId], onDelete: Cascade)
  reportId  String

  @@map("rewards")
}

// model CollectedWastes {
//   id             String   @id @default(uuid())
//   user           Users    @relation(references: [id], fields: [collectorId], onDelete: Cascade)
//   collectorId    String
//   collectionDate DateTime @default(now())
//   status         STATUS

//   @@map("collected-wastes")
// }

model Notifications {
  id        String   @id @default(uuid())
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String
  type      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("notification")
}

model Transactions {
  id          String   @id @default(uuid())
  user        Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  type        String
  amount      Int
  description String
  date        DateTime @default(now())

  @@map("transaction")
}
model Leaderboard {
  id        String   @id @default(uuid())
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  score     Int      @default(0)
  rank      Int      @default(0)
  createdAt DateTime @default(now())

  @@map("leaderboard")
}

enum STATUS {
  PENDING
  COMPLETED
}

enum WASTE_TYPE {
  PLASTIC
  PAPER
  METAL
  GLASS
  ELECTRONIC
}
